"""
Implementation of a Binary Search Tree
data structure.

Copyright 2016, University of Freiburg.
Olelsii Saukh <saukho@cs.uni-freiburg.de>
"""


class Node:
    '''
    Class that will represent the
    node of the BSTree
    '''

    def __init__(self, key_value=0, sentinel=False):
        '''
        Constructor. Sets all to None
        and set a certain value to the key
        '''
        self.key = key_value
        self.left = None
        self.right = None
        self.parent = None
        self.sentinel = sentinel

    def get_key(self):
        '''
        Returns the value of the key
        '''
        return self.key

    def set_key(self, key_value):
        '''
        Set value of the key
        '''
        self.key = key_value

    def get_left(self):
        '''
        Returns the left child of the node
        '''
        return self.left

    def set_left(self, left_child):
        '''
        Sets the left child of the node
        '''
        self.left = left_child

    def get_right(self):
        '''
        Returns the right child of the node
        '''
        return self.right

    def set_right(self, right_child):
        '''
        Sets the right child of the node
        '''
        self.right = right_child

    def get_parent(self):
        '''
        Returns the parent of the node
        '''
        return self.parent

    def set_parent(self, parent):
        '''
        Sets the parent of the node
        '''
        self.parent = parent

    def make_sentinel(self):
        '''
        Make node sentinel
        '''
        self.sentinel = True
        self.left = self.right = self.parent = self

    def is_sentinel(self):
        '''
        Returns True if current node is sentinel.
        otherwise returns False
        '''
        return self.sentinel


class BSTree:
    '''
    Implementation of Binary search tree.
    '''

    def __init__(self):
        '''
        Constructor. Creates empty BST
        '''
        self.sentinel = Node(0, True)
        self.root = self.sentinel
        self.number_of_nodes = 0

    def create_node(self, key):
        '''
        This method creates a new node and sets its
        child/parent pointers to sentinel
        Returns pointer to newly created node
        '''
        new_node = Node(key, False)
        new_node.set_left(self.sentinel)
        new_node.set_right(self.sentinel)
        new_node.set_parent(self.sentinel)
        return new_node

    def insert(self, key):
        '''
        Inserts a new key into BST.
        If the key is already there - nothing happens
        '''
        # check if key is already in the tree
        node = self._find_node(key)
        if node.is_sentinel() is False:
            return

        # key is not in the tree
        self.number_of_nodes += 1

        # check if root is present
        if self.root.is_sentinel():
            self.root = self.create_node(key)
            return

        tree_it = self.root
        while True:
            if tree_it.get_key() > key:
                if tree_it.get_left().is_sentinel():
                    tree_it.set_left(self.create_node(key))
                    tree_it.get_left().set_parent(tree_it)
                    return
                else:
                    tree_it = tree_it.get_left()
            else:
                if tree_it.get_right().is_sentinel():
                    tree_it.set_right(self.create_node(key))
                    tree_it.get_right().set_parent(tree_it)
                    return
                else:
                    tree_it = tree_it.get_right()

    def find(self, key):
        '''
        Returns True, if key is present in the tree,
        False otherwise
        '''
        node = self._find_node(key)
        if node.is_sentinel():
            return False
        return True

    def _find_node(self, key):
        '''
        Returns a Node object that has the same key as required.
        If such object is not present in the BST, returns None
        '''
        tree_it = self.root
        while tree_it.is_sentinel() is False:
            if tree_it.get_key() == key:
                break
            if tree_it.get_key() > key:
                tree_it = tree_it.get_left()
            else:
                tree_it = tree_it.get_right()

        return tree_it

    def remove(self, key):
        '''
        Removes given key from the BST. If key is not present
        in the tree - nothing happens
        '''
        node = self._find_node(key)
        if node.is_sentinel():
            return  # nothing to remove

	self.number_of_nodes -= 1
        if node.get_left().is_sentinel():
            self.exchange(node, node.get_right())
        elif node.get_right().is_sentinel():
            self.exchange(node, node.get_left())
        else:
            min_node = self.get_min(node.get_right())
            if min_node.get_parent() != node:
                self.exchange(min_node, min_node.get_right())
                min_node.set_right(node.right)
                min_node.get_right().set_parent(min_node)
            self.exchange(node, min_node)
            min_node.set_left(node.get_left())
            min_node.get_left().set_parent(min_node)

    def get_min(self, node):
        '''
        Returns the minimum key in the subtree rooted
        at node
        '''
        assert node.is_sentinel() is False
        it = node
        while it.get_left().is_sentinel() is False:
            it = it.get_left()
        return it

    def exchange(self, u, v):
        '''
        Exchanges subtrees rooted in u and v.
        '''
        if u.get_parent().is_sentinel():
            self.root = v
        elif u == u.get_parent().get_left():
            u.get_parent().set_left(v)
        else:
            u.get_parent().set_right(v)
        if v.is_sentinel() is False:
            v.set_parent(u.get_parent())

    def size(self):
        '''
        Returns the number of keys inserted in the tree
        '''
        return self.number_of_nodes

    def to_array(self):
        array = []
        self._traverse_in_order(self.root, array)
        return array

    def simple_bfs_range(self, a, b):
        bfs_list = []
        return_list = []
        queue = []
        queue.append(self.root)
        while len(queue) > 0:
            node = queue[0]
            del queue[0]
            if node.is_sentinel():
                continue
            bfs_list.append(node.get_key())
            queue.append(node.get_left())
            queue.append(node.get_right())

        for i in range(0, len(bfs_list)):
            if a <= bfs_list[i] and bfs_list[i] <= b:
                return_list.append(bfs_list[i])
        return return_list

    def avgDepth(self):
        '''
        Method computes average depth of all nodes in the tree.
        Returns:
            double - average depth of all nodes.
        '''
        # TODO: Implement this method!
        pass